#include<stdio.h>
#include<malloc.h>
struct node
{
    int data,count;
    struct node *left,*right;
};
struct node *new(int x)
{
 struct node *temp;
 temp=(struct node*)malloc(sizeof(struct node));
 temp->data=x;
 temp->count=1;
 temp->left=NULL;
 temp->right=NULL;
 return temp;
}
struct node *insert(struct node *root,int x)
{
 if(root==NULL)
 {
    return new(x);
 }
 if(root->data>x)
 {
     root->left=insert(root->left,x);
 }
 else if(root->data<x)
 {
     root->right=insert(root->right,x);
 }
 else if(root->data==x)
 {
     (root->count)++;
     return;
 }
  return root;
}
struct node* min(struct node* root)
{
 struct node *current=root;
 while(current->left!=NULL)
 {
     current=current->left;
 }
 return current;
}
struct node* del(struct node* root,int x)
{
 if(root==NULL)
 {
     return root;
 }
 else if(x<root->data)
 {
     root->left=del(root->left,x);
 }
 else if(x>root->data)
 {
     root->right=del(root->right,x);
 }
 /*else if(x==root->data)
 {
     while(root->count!=1)
    {
     (root->count)--;
    }

     return;
 }*/
 else
    {
        if(root->left==NULL)
        {
            struct node *temp=root->right;
            free(root);
            return temp;
        }
        else if(root->right==NULL)
        {
            struct node *temp=root->left;
            free(root);
            return temp;
        }

    struct node *temp=min(root->right);
    root->data=temp->data;
    root->right=del(root->right,temp->data);
 //   return root;
 }
 return root;
}
void inorder(struct node *root)
{
    if(root!=NULL)
    {
    inorder(root->left);
    printf("%d\t\t",root->data);
    inorder(root->right);
    }
}
int main()
{
    struct node *root=NULL;
    //root=(struct node*)malloc(sizeof(struct node));
    int i,n,val;
    scanf("%d",&n);
    int a[n];
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
        root=insert(root,a[i]);
    }
    inorder(root);
    printf("\n");
    scanf("%d",&val);

    root=del(root,val);
    inorder(root);
}

 
